import numpy as np
X=np.array(([2,9],[1,5],[3,6],[5,4]),dtype=float)
Y=np.array(([92],[86],[89],[90]),dtype=float)
y=Y/100

m,n=np.shape(Y)
print(m)
print(n)
print(X)
print(y)

def sigmoid(x):
    return 1/(1+np.exp(-x))

def derivatives_sigmoid(x):
    return x*(1-x)

epoch=100000
lr=0.1
inputlayer_neurons=2
hiddenlayer_neurons=3
output_neurons=1

wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons))
bh=np.random.uniform(size=(1,hiddenlayer_neurons))
wout=np.random.uniform(size=(hiddenlayer_neurons,output_neurons))
bout=np.random.uniform(size=(1,output_neurons))

print(wh)
print(bh)
print(wout)
print(bout)

for i in range(epoch):
    h_ip=np.dot(X,wh)+bh
    h_act=sigmoid(h_ip)
    o_ip=np.dot(h_act,wout)+bout
    output=sigmoid(o_ip)
    

    Eo=y-output
    outgrad=derivatives_sigmoid(output)
    d_output=Eo*outgrad
    Eh=d_output.dot(wout.T)
    hiddengrad=derivatives_sigmoid(h_act)
    d_hidden=Eh*hiddengrad
    wout+=h_act.T.dot(d_output)*lr
    wh+=X.T.dot(d_hidden)*lr

print(wh)
print(wout)
print("Normalized Input:\n"+str(X))
print("Actual Output:\n"+str(y))
print("Predicted Output:\n",output)
