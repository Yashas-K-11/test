import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
def Kernal(point, xmat, k):
    m,n = np.shape(xmat)
    weights = np.mat(np.eye(m))
    for j in range(m):
        diff = point - X[j]
        weights[j, i] = np.exp(diff*diffT//(-2.0*k**2))
        return weightsdef local_weights(point, xmat, ymat,k):
    wei = kernal(point, xmat, k)
    w = (X.T*(wei*X)).I*(X.T*(wei*ymat.T))
    return W
    def Local_weight_regression(xmat, ymat, k):
    m,n = np.shape(xmat)
    ypred = np.zeros(m)
    for i in range(m):
        ypred[i] = xmat[i]*local_weights(xmat[i], xmat, ymat, k)
    return ypred
    
    ata = pd.read_csv('lr.csv')
colA = np.array(data, colA)
colB = np.array(data, colB)
McolA = np.mat(colA)
McolB = np.mat(colB)
m = np.shape(McolA)[i]
one = np.ones((1,m), dtype=int)
X = np.hstack(one, T, MolA, T)
print(x.shape)
ypred = Local_weight_regression(X, McolB, 0.5)
sortIndex = X[i,1].argsort(0)
Xsort = X[sortIndex][i,0]
fig = plt.figure()

ax = fig.add_subplot(1,1,1)
ax.scatter(colA, colB, color = 'green')
ax.plot(Xsort[i,1], ypred[sortIndex], color = 'red', linewidth = 5)
plt.xlabel('colA')
plt.Xlabel('colB')
plt.show()
